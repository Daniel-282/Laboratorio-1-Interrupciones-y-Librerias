//******************************************************************************
/* 
 * File:   Interrupciones Main.c
 * Author: Daniel
 *
 * Created on July 14, 2021, 1:52 AM
 */
//******************************************************************************
// Importación de Librerías
//******************************************************************************

#include <xc.h>

//******************************************************************************
// Palabra de configuración
//******************************************************************************
// CONFIG1
#pragma config FOSC = XT        // Oscillator Selection bits (HS oscillator: High-speed crystal/resonator on RA6/OSC2/CLKOUT and RA7/OSC1/CLKIN)
#pragma config WDTE = OFF       // Watchdog Timer Enable bit (WDT disabled and can be enabled by SWDTEN bit of the WDTCON register)
#pragma config PWRTE = OFF      // Power-up Timer Enable bit (PWRT disabled)
#pragma config MCLRE = OFF      // RE3/MCLR pin function select bit (RE3/MCLR pin function is digital input, MCLR internally tied to VDD)
#pragma config CP = OFF         // Code Protection bit (Program memory code protection is disabled)
#pragma config CPD = OFF        // Data Code Protection bit (Data memory code protection is disabled)
#pragma config BOREN = OFF      // Brown Out Reset Selection bits (BOR disabled)
#pragma config IESO = OFF       // Internal External Switchover bit (Internal/External Switchover mode is disabled)
#pragma config FCMEN = OFF      // Fail-Safe Clock Monitor Enabled bit (Fail-Safe Clock Monitor is disabled)
#pragma config LVP = OFF        // Low Voltage Programming Enable bit (RB3 pin has digital I/O, HV on MCLR must be used for programming)

// CONFIG2
#pragma config BOR4V = BOR40V   // Brown-out Reset Selection bit (Brown-out Reset set to 4.0V)
#pragma config WRT = OFF        // Flash Program Memory Self Write Enable bits (Write protection off)

//******************************************************************************
// Prototipos de funciones
//******************************************************************************
void Setup(void);
void delay(char n);

//******************************************************************************
// Variables
//******************************************************************************

__bit ANTIREBOTE_CONTADOR1;
__bit ANTIREBOTE_CONTADOR2;

//******************************************************************************
// Vector de interrupcion
//******************************************************************************
void __interrupt() portb(void){
    if(RBIF == 1){
        //Contador ascendente
        if (RB0 == 1) {
            ANTIREBOTE_CONTADOR1 = 1;
        }
        if (ANTIREBOTE_CONTADOR1 == 1 && RB0 == 0){
            PORTC = PORTC + 1;
            ANTIREBOTE_CONTADOR1 = 0;
        }
        //Contador descendente
         if (RB1 == 1) {
            ANTIREBOTE_CONTADOR2 = 1;
         }
        if (ANTIREBOTE_CONTADOR2 == 1 && RB1 == 0){
            PORTC = PORTC - 1;
            ANTIREBOTE_CONTADOR2 = 0;
        }
        
        RBIF = 0;
    }
}

//******************************************************************************
// Ciclo principal
//******************************************************************************
void main(void) { 
    Setup();
    //**************************************************************************
    // Loop principal
    //**************************************************************************
    while(1){
       
        delay(10);
        
    }
}
//******************************************************************************
// Configuración
//******************************************************************************
void Setup(void){     
    PORTE = 0;
    PORTC = 0;
    PORTA = 0;
    
    ANSEL = 0;
    ANSELH = 0;
    
    TRISE = 0;
    TRISC = 0;
    TRISA = 0;
    /*TRISBbits.TRISB0 = 0;
    PORTBbits.RB0 = 0;*/
    TRISB = 0xFF;  
    PORTB = 0;
    
   // nRBPU = 0; //Habilita resistencias pull-up
    //WPUB0 = 1; //Resistencia pull-up al pin PORTB.0
    IOCB0 = 1; //Habilita interrupción por cambio
    IOCB1 = 1;
    
    GIE=1;
    RBIE=1;
    RBIF=0;
    
    
}
//******************************************************************************
// Delay
//******************************************************************************
void delay(char n){
    for(int i = 0; i < n; i++){
        for(int j = 0; j < 255; j++ ){
            
        }
    }

}
//******************************************************************************
// Funciones Adicionales
//******************************************************************************
